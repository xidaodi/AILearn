
# 正则表达式的规则 - 重点
'''
普通字符串： 大小写字母、数字、符号。。。
转义字符： \w \W \d \D ...
特殊字符: . * + ? ^ $ () [] {}
模式符号： I U
'''


import re

# 定义字符串
varstr = '@ _2i4l22oveyou'

# 转义字符
reg = '\w' # 代表 单个 字母、数字、下划线
reg = '\W' # 代表 单个 非 字母、数字、下划线
reg = '\d' # 代表 单个的 数字
reg = '\D' # 代表 单个的 非数字
reg = '\s' # 代表 单个的 空白符或者制表符
reg = '\S' # 代表 单个的 非 空白符或者制表符
reg = '\w\w\w\d\d' # 转义字符的组合使用




# 特殊字符（元字符） . * + ? {} [] ()   ^ $

varstr = '_AAAalove123 @ _2ial2345oveyou'

reg = '.'    # . 点 代表 单个的 任意字符，除了换行符之外
reg = 'A*'  # * 代表匹配次数 任意次数
reg = '\w+'  # + 代表匹配次数 至少匹配一次
reg = '\w+?'  # 拒绝贪婪，就是前面的匹配规则只要达成即可
reg = '\w*?'  # 拒绝贪婪，就是前面的匹配规则只要达成即可
reg = '\w{8}'  # {}代表匹配次数，{8}一个数字时，代表必须要匹配的次数
reg = '\w{2,4}' # {2,4} 两个数字时，表示匹配的区间次数
reg = '[a-zA-Z]' # 代表取值的范围 a-zA-Z代表大小写字母 0-9代表数字
reg = '[a-zA-Z0-9_]' # 等同于 \w
reg = '\w{2}(\d{4})\w'  # （） 代表子组，就是在整个匹配的结果中，再单独提取一份小括号的内容

# res = re.search(reg,varstr)
# print(res)
# print(res.groups())

# 匹配手机号
# varstr = '17610195211'
# reg = '^1\d{10}$'    # ^ 代表开头   $ 代表结尾
# res = re.search(reg,varstr)
# print(res)



# 正则的模式 re.I 代表不区分大小写
varstr = 'iLOVEyou'

reg = '[a-z]{5,10}'
res = re.search(reg,varstr,re.I)
print(res)

'''
练习题
1。 定义一个正则表达式来验证邮箱是否正确

2。 完善 手机号码的正则表达式

3。 定义一个匹配IP的正则表达式 0-255   255.255.255.254
'''